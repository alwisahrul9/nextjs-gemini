import { fileManager, model } from "@/app/lib/gemini/config";
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

// Tentukan direktori sementara, misalnya di `/tmp`
const TEMP_DIR = path.join(process.cwd(), "tmp");

// Pastikan direktori sementara ada
if (!fs.existsSync(TEMP_DIR)) {
    fs.mkdirSync(TEMP_DIR);
}

export async function POST(request) {
    try {
        // Mengambil FormData dari request
        const formData = await request.formData();
        const file = formData.get("file");
        const prompt = formData.get("prompt");

        if (!file) {
            const result = await model.generateContent(prompt);
            return NextResponse.json({ message: "Success", data: result.response.text() }, { status: 200 });
        }

        // Menentukan nama dan lokasi file sementara
        const filePath = path.join(TEMP_DIR, file.name);

        // Membaca konten file sebagai buffer
        const fileBuffer = Buffer.from(await file.arrayBuffer());

        // Menyimpan file di folder sementara
        fs.writeFileSync(filePath, fileBuffer);

        // Upload the file and specify a display name.
        const uploadResponse = await fileManager.uploadFile(filePath, {
            mimeType: "application/pdf",
            displayName: "Gemini 1.5 PDF",
        });

        // Generate content using text and the URI reference for the uploaded file.
        const result = await model.generateContent([
            {
                fileData: {
                    mimeType: uploadResponse.file.mimeType,
                    fileUri: uploadResponse.file.uri,
                },
            },
            {
                text: prompt
            },
        ]);

        fs.unlinkSync(filePath);

        return NextResponse.json({ message: "File uploaded successfully", data: result.response.text(), path: filePath }, { status: 200 });

    } catch (error) {
        return NextResponse.json({ message: "File upload failed", error: error.message }, { status: 500 });
    }
}
